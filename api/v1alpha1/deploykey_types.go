/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeployKeySpec defines the desired state of DeployKey.
type DeployKeySpec struct {
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:MaxLength=255
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:default="Generated by GHOps"
	Title string `json:"title,omitempty" yaml:"title,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=255
	// +kubebuilder:validation:MinLength=1
	// Owner is the name of the owner (user or org) who owns the repository.
	// Example: "odit-services"
	Owner string `json:"owner,omitempty" yaml:"owner,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=255
	// +kubebuilder:validation:MinLength=1
	// Repository is the name of the repository to which this deploy key applies.
	// Example: "ghops"
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty"`

	// +kubebuilder:validation:Enum=read-only;read-write
	// +kubebuilder:validation:Required
	// +kubebuilder:default=read-only
	Permission Permission `json:"permission,omitempty" yaml:"permission,omitempty"`

	// +kubebuilder:validation:Optional
	// +kubebuilder:default=ed25519
	// +kubebuilder:validation:Enum=ed25519;rsa
	// KeyType defines the type of SSH key to generate.
	// Supported values: "ed25519", "rsa"
	KeyType KeyType `json:"keyType,omitempty" yaml:"keyType,omitempty"`
}

// Permission defines the permission level for the deploy key.
type Permission string

const (
	// ReadOnly indicates that the deploy key has read-only access.
	ReadOnly Permission = "read-only"
	// ReadWrite indicates that the deploy key has both read and write access.
	ReadWrite Permission = "read-write"
)

type KeyType string

const (
	// ED25519
	ED25519 KeyType = "ed25519"
	// RSA
	RSA KeyType = "rsa"
)

// DeployKeyStatus defines the observed state of DeployKey.
type DeployKeyStatus struct {
	Created     bool   `json:"created,omitempty" yaml:"created,omitempty"`
	SecretRef   string `json:"secretRef,omitempty" yaml:"created,omitempty"`
	GitHubKeyID int64  `json:"githubKeyID,omitempty" yaml:"githubKeyID,omitempty"`
	CrStatus    `json:",inline" yaml:",inline"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// DeployKey is the Schema for the deploykeys API.
type DeployKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DeployKeySpec   `json:"spec,omitempty"`
	Status DeployKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeployKeyList contains a list of DeployKey.
type DeployKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeployKey `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DeployKey{}, &DeployKeyList{})
}
